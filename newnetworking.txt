Abendstern Network Protocol

OVERVIEW
Abendstern's networking design operates as a peer-to-peer system over IPv4 or
IPv6 UDP. Unlike previous versions, this protocol primarily operates by
manipulation of byte arrays, removing the headaches associated with the older
event-driven designs.

All values are little-endian, unless otherwise noted. All structures are aligned
only to byte boundaries. In sub-byte structures, lower bits are listed before
higher. Floats are represented as IEEE 754-2008 single-precision values, in
little-endian byte order.

Strings are represented as NUL-terminated byte strings, encoded with UTF-8.

TOP-LEVEL
All packets begin with the following data:
  uint16        Sequence number
  uint16        Channel number
The sequence number is used to temporarily identify the packet, for purposes of
duplicate removal and acknowledgement. Sequence numbers in a connection start
from zero for both peers, and are incremented with every packet. Packets with
sequence numbers out of a certain range are silently ignored.

The channel number identifies the logical destination of the packet. A packet
directed to a channel that is not open is silently ignored.

Each channel can be bound to a "Gerät" (device best describes the concept, but
"network device" generally refers to the physical object) which handles the
actual payload of the packet. Initially, only channel 0 is open to the
Synchronous Command Gerät.

BLOCK GERÄTE
The majority of Geräte belong to a class called "block Geräte", which define a
structure lying on top of a byte array. The remote peer communicates by mutating
the block using the protocol described below. When a block Gerät is opened, the
array's contents are initially zero (but the object is considered uninitialised
until the first complete mutation operation).

Communicatino with a block Gerät is done via mutation operations. Since these
operations may be larger than 256 bytes, they are often split into multiple
packets. Therefore, this sub-protocol comes in two layers. The upper layer
prefixes fragments with the following structure:
  uint32        Operation sequence number
  uint16        Fragment index
  uint16        Number of fragments
  <payload>
The operation sequence number starts at 1; the first 0 is the implicit
initialisation of the block to zero. The second field allows proper sequencing
(and ignoring) of operations such that a consistent state is preserved.

An operation is not applied until all fragments have been received. When all
fragments are received, it is applied to the current state. It is up to the
remote peer to ensure that the operations maintain consistency regardless of the
conditions in which the packets arrive (ie, it cannot make assumptions about the
stati of un-NAKed, un-ACKed packets).

Any operations with a sequence number less than or equal to the most recently
processed operation are ignored.

An operation is composed of a series of deltata; each delta has the following
high-level format:
  index-format
  offset (also called "start" below) from end of previous segment
  length minus one
  byte[length] data

The index-format is a byte specifing the format of the indices:
  0     If set, the offset is embedded in bits 1-4, and the length in 5-7, in
        this byte. Otherwise, bits 1-7 specify format.
  1-3   If not embedded (see bit 1), determines the format of the indices
        following the format byte:
          0     4-4     (s=p[1]&0xF,                    l=(p[1]>>4)&0xF)
          1     6-2     (s=p[1]&0x3F,                   l=(p[1]>>6)&0x3)
          2     8-8     (s=p[1],                        l=p[2])
          3     12-4    (s=p[1]|((p[2]&0xF) << 8),      l=(p[2]>>4)&0xF)
          4     16-8    (s=p[1]|(p[2]<<8),              l=p[3])
          5     20-4    (s=p[1]||(p[2]<<8)|((p[3]&0xF)<<16), l=p[3]>>4)
          6     24-8    (similar)
          7     8-4     (s=p[1], l=p[0]>>4)
  4-7   In format 7, the length
The data that follow the indices are copied into the block at the given
location. Out-of-bounds indices are ignored.

The strategy for the transmitter may be as follows:
o Maintain a series of states the remote peer may have, corresponding to as yet
  unacknowledged operations.
o Always transmit deltata against the earliest possible state
o Two modes of operation: "high-speed" and "synchronous"
  - Use synchronous mode when a fragmented delta is sent, or when 8 or more
    states are pending
  - Use high-speed mode otherwise
o In high-speed mode, transmit new delta whenever changes are made
o In high-speed mode, a NAK merely removes that state from the possibilities,
  and triggers transmission of a new delta on the next update even if no changes
  are made (this only if it was a NAK for the latest delta)
o In synchronous mode, no new deltata are created ever (until the Gerät
  transitions back into high-speed mode)
o In synchronous mode, NAKs for delta fragemnts cause the fragments to be
  retransmitted if it is for the most recent operation
o Synchronous mode persists until it is known that the remote peer is
  up-to-date.


CONNECTIONLESS PACKETS
When a peer receives a packet from a host it is not connected to, it interprets
the packet as a connectionless request, according to the first few bytes in the
packet.

00-00-00-00-02 Start Connection
This is technically a STX packet to the Synchronous Control Gerät, but must be
processed separately since no connection exists yet. See STX under the SCG for
more information.

"Abendsuch" Discover Game
No contents.
Requests a Game-Discovery packet as an answer. Peers participating in LAN games
should answer appropriately.

"Abendspiel" Game Discovery
Contents:
  uint32        Client number of overseer (see Peer Information Gerät)
  byte          Peer count
  byte          Zero if open, one if password-protected
  char[4]       Game mode

--- STANDARD GERÄTE ---
The Geräte below are used by the protocol, and are not specific to Abendstern.

SYNCHRONOUS COMMAND GERÄT
The SCG is used for controlling the protocol itself. The SCG does not have an
assigned number, and it is an error to close the channel is open on.

The SCG, as its name suggests, only allows one outstanding packet at a time,
using its own synchronous acknowledgement system, separate from the asynchronous
acknowledgement Gerät.

Communication works as follows: Whenever the local peer sends a packet needing
acknowledgement, it will not send any further packets until that packet has been
ACKed (ACK and EOT packets are exempt from this rule); if no ACK is received
after a time somewhat greater than the estimated round-trip time, the packet is
retransmitted. Whenever an ACK-needing packet is received, even if it is a
duplicate, an ACK is immediately sent for it. If the SCG has sent nothing for
one second, it sends a SYN packet to keep the connection open.

Each packet it sends is prefixed with a byte indicating the packet's purpose:
  0x02  STX     Start of transmission
  0x04  EOT     End of transmission
  0x06  ACK     Synchronous Acknowledgement
  0x22  SYN     Synchronous Idle
  0x11  XON     Open channel(s)
  0x13  XOF     Close channel(s)

Packet format for STX:
  byte[16]      Protocol version hash
  char[16]      Application name ("Abendstern      ")
  (auxiliarry data)
An STX requests to open two-way communication between peers. An STX is answered
with an ACK or an EOT, depending on whether the peers are compatible and willing
to talk to each other.

Packet format for EOT:
  string        Disconnect reason
  string        l10n entry for disconnect reason
A connection is considered closed after transmission of an EOT. EOTs are not
ACKed; rather, the EOT is sent several times to make delivery likely.

Packet format for ACK:
  uint16        Packet number being acknowledged
ACK indicates that the specified packet has been received successfully. An
ACK is assumed to reach the destination unless the acknowledged packet is
retransmitted. Every reception of an ACK-needing packet is to be answered with
exactly one ACK.

Packet format for SYN:
  empty
SYN is sent to indicate that the sender has nothing to send. It primarily serves
to give a distinction between loss of connectivity and a successful ACK. A SYN
is not replied to.

Packet format for XON (repeated for each channel to open):
  uint16        Gerät number
  uint16        Channel number
XON opens a Gerät on the given channel. It must be ACKed.

Packet format for XOF (repeated for each channel to open):
  uint16        Channel number
XOF closes the given channel and its Gerät. Closing Gerät zero effectively ends
the connection, since it terminates the ability for the SCG of the other peer
to communicate (no ACKs can be sent in reply).

LATENCY DISCOVERY GERÄT
Gerät number: 0
Number per connection: 0 or 1
Requires: none
The LDG, when open by both peers, allows calculating round-trip delay of
packets. It uses no acknowledgement system; packets which do not reach the
destination can be simply considered dropped. The first byte of a packet
identifies the type: 0 is PING and 1 is PONG. When a peer receives a PING, it
should immediately respond with a PONG containing the same payload data. The
payload data is implementation-, platform-, and build-specific.

ASYNCHRONOUS ACKNOWLEDGEMENT GERÄT
Gerät number: 1
Number per connection: 0 or 1 (effectively 1, since everything uses it)

The Asynchronous Acknowledgement Gerät provides delivery status notification to
those Geräte that use it (called an AAG-client hereonout).

Whenever a peer receives packets to be acknowledged, it stores the sequence
numbers in ascending order until all current packets have been processed, then
sends a packet with the following structure:
  uint16        Greatest sequence number acknowledged in the most recent
                acknowledgement sent, plus 1.
  bytes...      Bitset indicating which packets are acknowledged
Each bit at index i within the bitset (bits within bytes starting from the least
significant bit) is 1 to indicate positive acknowledgement, 0 to indicate
negative. Zero bits beyond the last 1 bit are meaningless.

It is not an error to acknowledge the same packet more than once; this will
happen, for example, if an acknowledgement is not acknowledged before the next
acknowledgement packet is sent.

The AAG is itself an AAG-client so that it can know whether its acknowledgements
reach the remote peer. It will retransmit its acknowledgement packets on
negative acknowledgement, or after a sufficient delay.

Since the AAG normally requires the receiving of a packet to trigger the sending
of an acknowledgement, the AAG will transmit an empty packet every so often if
it has not sent anything else in that interval.

Since lost acknowledgement packets require a chain of successful retransmissions
in reverse order to be retransmitted the normal way, any of these packets that
ages too much will be spontaneously retransmitted and its age reset.

SEQUNTIAL TEXT GERÄT
Gerät number: 2
Number per connection: 0 or 1
Requires: AAG, acceptance (via PIG)

All packets from this Gerät have the following structure:
  uint64        Strong sequence number
  NTBS          payload

Sequence numbers start at zero, and are incremented on every outgoing packet.
STD packets are guaranteed too be processed in the order they are transmitted;
one is not processed until its sequence number is exactly what is expected.

TEXT MESSAGE GERÄT
Gerät number: 3
Number per connection: 0 or 1
Requires: AAG, acceptance (via PIG)

Packets have the following structure:
  NTBS          payload

This device passes user text messages, which do not need strong ordering (and
are handled quite differently from sequential text in Abendstern).

PEER CONNECTIVITY GERÄT
Gerät number: 5
Number per connection: 1
Requires: AAG

Packet structure:
  byte          Type
                  0 = positive declaration
                  1 = negative declaration
                  2 = specific query
                  3 = general query (below structure not included for this type)
  If IPv4:
  byte[4]       Internet address
  uint16        Internet port
  byte[4]       LAN address
  uint16        LAN port
  If IPv6:
  uint16[8]     Internet address
  uint16        Internet port
  uint16[8]     LAN address
  uint16        LAN port

The meanings for the four types:
  Positive declaration: The peer declares that it has a functioning connection
    FROM the given remote peer.
  Negative declaration: The peer declares that it does not have, or no longer
    has, a functioning connection from the given remote peer, and that it has
    given up trying to reconnect to it (if applicable).
  Specific query: The sender requests information regarding the receiver's
    connection to the given other peer. The receiver should immediately
    broadcast a positive or negative declaration in response, as appropriate.
  General query: The sender requests information on all connected peers. The
    receiver should immediately unicast a positive declaration for every peer it
    knows about.

Each peer should periodically send a spurious specific query to a random peer
regarding another random peer (from the local or remote list, randomly). This
allows all peers to maintain an idea of how fully the all-to-all topology is
satisfied.

Additionally, positive and negative declarations for specific peers are
broadcast on connection/disconnection of that peer, respectively.

The PCG provides two facilities:
1. It allows peers to discover other peers they need to connect to.
2. It allows peers to determine the true topology of the network.

The first facility works as follows: When a peer receives a positive declaration
from a remote peer it thinks is the overseer, and it has not yet connected to
the peer indicated, it will attempt to connect to it. When any peer receives a
negative declaration regarding a remote peer it is connected to, it answers with
a positive declaration. Finally, when a connection to a new peer is established,
a general query on the part of the connection-initiator is performed in order to
discover the other peers.

The second is accomplished simply by maintaining lists based on the given
information. To note is the fact that the reports indicate connections FROM, not
TO. Each positive report gives credit to the peer reported, not the peer
reporting. To prevent cheating by selective disconnection, any overseer-ready
peer that lacks three or more known connections that are older than 30 seconds
will be disconnected. (See the section on STG usage for information on
overseer-readiness.) This threshhold is reduced to 2 for games of 5 or 6
players, and to 1 for 4 or fewer.
(While Abendstern generally takes a let-the-players-vote-on-it approach to
 cheating, this is a special case --- to the players being cheated, it would
 appear that the overseer was cheating, as they would have no knowledge of the
 additional player not connecting to their systems. To those not being cheated,
 nothing would appear out of the ordinary.)


--- Begin: Abendstern-Specific ---
ABENDSTERN OBJECTS
All Abendstern objects to be sent on the network are block devices. Channels for
objects are only created to remote peers if it is deemed necessary for them to
know about them. Non-transient objects, like Ships, are always considered
necessary (for radar, etc). Others, like weapons, are only created if within a
certain distance of any of the remote peer's ships, typically a radius of 8.
Some objects, like EnergyCharges, can be perfectly extrapolated after creation.
These objects do not have updates sent over the network, until their
destruction. Since many objects need to be altered before being destroyed, an
object channel is not closed until its final update operation has been con be
confirmed processed.

The structure for objects themselves is defined in  src/net/definition.tcl .
See src/net/generate.tcl for a formal description of the file's contents.

SHIP DAMAGE GERÄT
Gerät number: (automatic)
Sends events indicating that one of the receiver's ships is believed to have
taken damage. Packets are unordered. Packets relating to nonexistent ships are
silently ignored. See the Blast class for interpretation of Blast-related data.
Packet structure:
  uint16        channel of ship being damaged
  float         X coordinate of ship at time of damage
  float         Y coordinate of ship at time of damage
  float         theta of ship at time of damage
  float         X coordinate of blast centre
  float         Y coordinate of blast centre
  float         falloff of blast
  float         strength of blast
  float         size of blast
  byte          blame of blast

USAGE of SEQUENTIAL TEXT GERÄT
Each packet consists of one character indicating the type of the message, and is
followed by up to 250 characters of payload (this prevents the packet from
hitting 256 bytes in size).

Message types:
  o     Underling-to-overseer message
  u     Peer-to-peer message
  b     Broadcast message
  s     Global state change
  p     Peer data state change
  x     Extension; the payload of this packet is prepended to that of the next
        before performing the next's operation.
  M     Indicates current game mode (see gamemgr.tcl)
  V     Proposes/votes that the next match use the given game mode
  R     Empty payload; indicates that the peer is now ready to become overseer
        if it has the lowest numeric ID.

Messages take the form of Tcl lists; the first element identifies the message
type, while the others are the parameters.

State changes are Tcl lists with an even number of elements. Every even element
is a Tcl list indicating a path into the appropriate data, and the following
element is the new value for the datum at that location. Values must pass
certain validation or will be ignored/edited.

Overseer-readiness indicates that the peer believes it has enough information
that it can act as the central source of game information. This entails two
things:
o It must have received the dats information from the current overseer.
o It must be connected to all the current peers.

AUXILLIARY DATA in STX PACKETS
Abendstern adds the following information to an STX packet:
  <globalid>
  uint32        Peer numeric ID
  byte[32]      Authentication information
  string        Peer name (to end of packet)
If IPv4 is in use, globalid has the form
  byte[4]       LAN IP address
  uint16        LAN port
  byte[4]       Internet IP address
  uint16        Internet port
If IPv6 is in use, globalid has the form
  uint16[8]     LAN IP address
  uint16        LAN port
  uint16[8]     Internet IP address
  uint16        Internet port

In LAN games, the Internet fields of the globalid are ignored. All peers
connect to each other using the LAN address/port pairs only. For IPv4, the
numeric ID is the bitwise complement of (the binary representation of the LAN
IP address XOR 192.168.0.0). For IPv6, the LAN IP address is split into 4
32-bit integers (ie, i0 = (addr[0]<<16)|addr[1]; i1 = (addr[2]<<16)|addr[2],
and so forth); these four integers are XORed together to get the numeric ID.
The authorisation information is the SHA-256 hash of the plaintext password
(which is "" if not password-protected) concatenated with the UTF-8-encoded
peer name.

In Internet games, the Internet fields of the globalid are relevant; peers may
use the LAN or Internet address/port pairs based on rules described below. The
numeric ID is the userid of the user currently logged into the Abendstern
Network on the sending peer; the peer name must be the current "friendly name"
of that user. The authentication information is a (little-endian) 256-bit
integer whose value is determined by the Abendstern Network server in a method
described below.

The rules for choosing which address/port pair to connect to is as follows: If
the Internet addresses (ignoring ports) of two peers match, they will connect
via the LAN address/port pairs; otherwise, they will connect on the Internet
address/port pairs. This method properly handles up to one layer of Network
Address Translation, while working around routers that ignore packets sent to
their own Internet addresses from within their LAN.

For every Internet game, the Abendstern Network server generates an RSA private
key, with p and q being about 128 bits long; they are chosen such that pq fits
within a 256-bit integer. Every peer connecting to a game is given n=pq; the
exponent is fixed to be 65537. The server uses the private key corresponding to
n to encrypt the the "peer signature", which results in a 256-bit integer also
given to the connecting peer. The latter is used for the authentication data in
the STX. Peers receiving the authentication information can then verify that
the public-key-decrypted authentication data matches the peer signature. The
peer signature is the SHA-256 sum of the peer name, XORed with the binary
representation of the numeric ID. (This scheme is not intended to be extremely
secure, only to do a good enough job of preventing unauthenticated users from
connecting to Internet games.)
