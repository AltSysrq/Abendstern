
  #ifndef XNETOBJ_HXX_
  #define XNETOBJ_HXX_

  /**
   * @file
   * @author src/net/generate.tcl
   * @brief Autogenerated. Do not edit!
   */

  #include "../object_geraet.hxx"

  /**
   * Creates and returns an ExportedObjectGeraet* that relays the object to the
   * remote peer. The channel is opened automatically.
   *
   * The program is aborted if it is not known how to export the given type of
   * object.
   */
  ExportedGameObject* createObjectExport(NetworkConnection*, GameObject*)
  throw();


  class ShieldGenerator;
  class Cell;
  #include "src/weapon/explode_listener.hxx"

class EnergyCharge;

class INO_EnergyCharge: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_EnergyCharge(NetworkConnection* cxn);
  virtual ~INO_EnergyCharge();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  EnergyCharge* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, EnergyCharge*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_EnergyCharge: public ExportedGameObject {
public:
  ENO_EnergyCharge(NetworkConnection*, EnergyCharge*);
  virtual ~ENO_EnergyCharge();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  EnergyCharge* clone(const EnergyCharge*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<EnergyCharge> {
        ENO_EnergyCharge*const that;
      public:
        ExplListener(EnergyCharge* it, ENO_EnergyCharge* that_);

        virtual void exploded(EnergyCharge*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class MagnetoBomb;

class INO_MagnetoBomb: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_MagnetoBomb(NetworkConnection* cxn);
  virtual ~INO_MagnetoBomb();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  MagnetoBomb* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, MagnetoBomb*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_MagnetoBomb: public ExportedGameObject {
public:
  ENO_MagnetoBomb(NetworkConnection*, MagnetoBomb*);
  virtual ~ENO_MagnetoBomb();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  MagnetoBomb* clone(const MagnetoBomb*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<MagnetoBomb> {
        ENO_MagnetoBomb*const that;
      public:
        ExplListener(MagnetoBomb* it, ENO_MagnetoBomb* that_);

        virtual void exploded(MagnetoBomb*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class SemiguidedBomb;

class INO_SemiguidedBomb: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_SemiguidedBomb(NetworkConnection* cxn);
  virtual ~INO_SemiguidedBomb();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  SemiguidedBomb* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, SemiguidedBomb*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_SemiguidedBomb: public ExportedGameObject {
public:
  ENO_SemiguidedBomb(NetworkConnection*, SemiguidedBomb*);
  virtual ~ENO_SemiguidedBomb();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  SemiguidedBomb* clone(const SemiguidedBomb*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<MagnetoBomb> {
        ENO_SemiguidedBomb*const that;
      public:
        ExplListener(MagnetoBomb* it, ENO_SemiguidedBomb* that_);

        virtual void exploded(MagnetoBomb*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class PlasmaBurst;

class INO_PlasmaBurst: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_PlasmaBurst(NetworkConnection* cxn);
  virtual ~INO_PlasmaBurst();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  PlasmaBurst* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, PlasmaBurst*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_PlasmaBurst: public ExportedGameObject {
public:
  ENO_PlasmaBurst(NetworkConnection*, PlasmaBurst*);
  virtual ~ENO_PlasmaBurst();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  PlasmaBurst* clone(const PlasmaBurst*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<PlasmaBurst> {
        ENO_PlasmaBurst*const that;
      public:
        ExplListener(PlasmaBurst* it, ENO_PlasmaBurst* that_);

        virtual void exploded(PlasmaBurst*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class Missile;

class INO_Missile: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Missile(NetworkConnection* cxn);
  virtual ~INO_Missile();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Missile* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Missile*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_Missile: public ExportedGameObject {
public:
  ENO_Missile(NetworkConnection*, Missile*);
  virtual ~ENO_Missile();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Missile* clone(const Missile*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<Missile> {
        ENO_Missile*const that;
      public:
        ExplListener(Missile* it, ENO_Missile* that_);

        virtual void exploded(Missile*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class ParticleEmitter;

class INO_ParticleEmitter: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_ParticleEmitter(NetworkConnection* cxn);
  virtual ~INO_ParticleEmitter();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  ParticleEmitter* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, ParticleEmitter*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_ParticleEmitter: public ExportedGameObject {
public:
  ENO_ParticleEmitter(NetworkConnection*, ParticleEmitter*);
  virtual ~ENO_ParticleEmitter();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  ParticleEmitter* clone(const ParticleEmitter*, NetworkConnection*) const throw();

  
};

class MonophasicEnergyPulse;

class INO_MonophasicEnergyPulse: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_MonophasicEnergyPulse(NetworkConnection* cxn);
  virtual ~INO_MonophasicEnergyPulse();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  MonophasicEnergyPulse* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, MonophasicEnergyPulse*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_MonophasicEnergyPulse: public ExportedGameObject {
public:
  ENO_MonophasicEnergyPulse(NetworkConnection*, MonophasicEnergyPulse*);
  virtual ~ENO_MonophasicEnergyPulse();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  MonophasicEnergyPulse* clone(const MonophasicEnergyPulse*, NetworkConnection*) const throw();

  
      class ExplListener: public ExplodeListener<MonophasicEnergyPulse> {
        ENO_MonophasicEnergyPulse*const that;
      public:
        ExplListener(MonophasicEnergyPulse* it, ENO_MonophasicEnergyPulse* that_);

        virtual void exploded(MonophasicEnergyPulse*) throw() {
          that->forceUpdate();
        }
      } explListener;
    
};

class Spectator;

class INO_Spectator: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Spectator(NetworkConnection* cxn);
  virtual ~INO_Spectator();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Spectator* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Spectator*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
};

class ENO_Spectator: public ExportedGameObject {
public:
  ENO_Spectator(NetworkConnection*, Spectator*);
  virtual ~ENO_Spectator();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Spectator* clone(const Spectator*, NetworkConnection*) const throw();

  
};

class Ship;

class INO_Ship4: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship4(NetworkConnection* cxn);
  virtual ~INO_Ship4();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship4: public ExportedGameObject {
public:
  ENO_Ship4(NetworkConnection*, Ship*);
  virtual ~ENO_Ship4();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship4::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship8: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship8(NetworkConnection* cxn);
  virtual ~INO_Ship8();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship8: public ExportedGameObject {
public:
  ENO_Ship8(NetworkConnection*, Ship*);
  virtual ~ENO_Ship8();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship8::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship16: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship16(NetworkConnection* cxn);
  virtual ~INO_Ship16();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship16: public ExportedGameObject {
public:
  ENO_Ship16(NetworkConnection*, Ship*);
  virtual ~ENO_Ship16();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship16::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship64: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship64(NetworkConnection* cxn);
  virtual ~INO_Ship64();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship64: public ExportedGameObject {
public:
  ENO_Ship64(NetworkConnection*, Ship*);
  virtual ~ENO_Ship64();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship64::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship256: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship256(NetworkConnection* cxn);
  virtual ~INO_Ship256();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship256: public ExportedGameObject {
public:
  ENO_Ship256(NetworkConnection*, Ship*);
  virtual ~ENO_Ship256();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship256::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship1024: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship1024(NetworkConnection* cxn);
  virtual ~INO_Ship1024();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship1024: public ExportedGameObject {
public:
  ENO_Ship1024(NetworkConnection*, Ship*);
  virtual ~ENO_Ship1024();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship1024::getShieldGenerator(c);
      }
    
};

class Ship;

class INO_Ship4094: public ImportedGameObject {
  NetworkConnection* cxn;
public:
  INO_Ship4094(NetworkConnection* cxn);
  virtual ~INO_Ship4094();
  static const NetworkConnection::geraet_num num;

protected:
  virtual void construct() throw();
  virtual void update() throw();

private:
  Ship* decodeConstruct(const std::vector<byte>&) const throw();
  bool decodeUpdate(const std::vector<byte>&, Ship*) throw();

  static InputNetworkGeraet* create(NetworkConnection*) throw();

  
      public:
      static ShieldGenerator* getShieldGenerator(const Cell*) throw();
    
};

class ENO_Ship4094: public ExportedGameObject {
public:
  ENO_Ship4094(NetworkConnection*, Ship*);
  virtual ~ENO_Ship4094();

  virtual void init() throw();

protected:
  virtual bool shouldUpdate() const throw();
  virtual void updateRemote() throw();

private:
  void encode() throw();
  Ship* clone(const Ship*, NetworkConnection*) const throw();

  
      static ShieldGenerator* getShieldGenerator(const Cell* c) throw() {
        return INO_Ship4094::getShieldGenerator(c);
      }
    
};

#endif
